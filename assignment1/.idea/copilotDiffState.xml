<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/assignments/assignment1/EmiCalcActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/assignments/assignment1/EmiCalcActivity.kt" />
              <option name="originalContent" value="package com.assignments.assignment1&#10;&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;&#10;class EmiCalcActivity : AppCompatActivity () {&#10;    // function to calculate monthly payment&#10;    fun calculateMonthlyPayment(principal: Double, annualInterestRate: Double, termInYears: Int): Double {&#10;        val monthlyInterestRate = annualInterestRate / 100 / 12&#10;        val numberOfPayments = termInYears * 12&#10;        return if (monthlyInterestRate == 0.0) {&#10;            principal / numberOfPayments&#10;        } else {&#10;            val factor = Math.pow(1 + monthlyInterestRate, numberOfPayments.toDouble())&#10;            principal * monthlyInterestRate * factor / (factor - 1)&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_emi_calc)&#10;&#10;        // back button to return to MainActivity&#10;        findViewById&lt;ImageButton&gt;(R.id.backButton).setOnClickListener {&#10;            finish() // This closes the current activity and returns to the previous one without recreating it&#10;        }&#10;&#10;&#10;        val amountInput = findViewById&lt;EditText&gt;(R.id.mortgageAmountInput)&#10;        val interestInput = findViewById&lt;EditText&gt;(R.id.interestRateInput)&#10;        val periodInput = findViewById&lt;EditText&gt;(R.id.amortizationPeriodInput)&#10;        val resultText = findViewById&lt;TextView&gt;(R.id.resultTextView)&#10;        val calcBtn = findViewById&lt;Button&gt;(R.id.calculateButton)&#10;&#10;        calcBtn.setOnClickListener {&#10;            val amount = amountInput.text.toString().trim().replace(',', '.').toDoubleOrNull()&#10;            val interest = interestInput.text.toString().trim().replace(',', '.').toDoubleOrNull()&#10;            val periodYears = periodInput.text.toString().trim().toIntOrNull()&#10;&#10;            var hasError = false&#10;            if (amount == null) { amountInput.error = &quot;Insert a valid amount&quot;; hasError = true }&#10;            if (interest == null) { interestInput.error = &quot;Insert interest rate &quot;; hasError = true }&#10;            if (periodYears == null) { periodInput.error = &quot;Insert the amortization period&quot;; hasError = true }&#10;            if (hasError) return@setOnClickListener&#10;&#10;            val monthlyPayment = calculateMonthlyPayment(amount!!, interest!!, periodYears!!)&#10;            resultText.text = String.format(&quot;Your monthly payment is %.2f&quot;, monthlyPayment)&#10;        }&#10;    }&#10;&#10;&#10;&#10;}" />
              <option name="updatedContent" value="package com.assignments.assignment1&#10;&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;&#10;class EmiCalcActivity : AppCompatActivity () {&#10;    // function to calculate monthly payment&#10;    fun calculateMonthlyPayment(principal: Double, annualInterestRate: Double, termInYears: Int): Double {&#10;        val monthlyInterestRate = annualInterestRate / 100 / 12&#10;        val numberOfPayments = termInYears * 12&#10;        return if (monthlyInterestRate == 0.0) {&#10;            principal / numberOfPayments&#10;        } else {&#10;            val factor = Math.pow(1 + monthlyInterestRate, numberOfPayments.toDouble())&#10;            principal * monthlyInterestRate * factor / (factor - 1)&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_emi_calc)&#10;&#10;        // back button to return to MainActivity&#10;        findViewById&lt;ImageButton&gt;(R.id.backButton).setOnClickListener {&#10;            finish() // This closes the current activity and returns to the previous one without recreating it&#10;        }&#10;&#10;&#10;        val amountInput = findViewById&lt;EditText&gt;(R.id.mortgageAmountInput)&#10;        val interestInput = findViewById&lt;EditText&gt;(R.id.interestRateInput)&#10;        val periodInput = findViewById&lt;EditText&gt;(R.id.amortizationPeriodInput)&#10;        val resultText = findViewById&lt;TextView&gt;(R.id.resultTextView)&#10;        val calcBtn = findViewById&lt;Button&gt;(R.id.calculateButton)&#10;&#10;        calcBtn.setOnClickListener {&#10;            val amount = amountInput.text.toString().trim().replace(',', '.').toDoubleOrNull()&#10;            val interest = interestInput.text.toString().trim().replace(',', '.').toDoubleOrNull()&#10;            val periodYears = periodInput.text.toString().trim().toIntOrNull()&#10;&#10;            var hasError = false&#10;            if (amount == null) { amountInput.error = &quot;Insert a valid amount&quot;; hasError = true }&#10;            if (interest == null) { interestInput.error = &quot;Insert interest rate &quot;; hasError = true }&#10;            if (periodYears == null) { periodInput.error = &quot;Insert the amortization period&quot;; hasError = true }&#10;            if (hasError) return@setOnClickListener&#10;&#10;            val monthlyPayment = calculateMonthlyPayment(amount!!, interest!!, periodYears!!)&#10;            resultText.text = String.format(&quot;Your monthly payment is %.2f&quot;, monthlyPayment)&#10;        }&#10;    }&#10;&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>